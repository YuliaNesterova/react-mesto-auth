{"ast":null,"code":"class Api {\n  constructor({\n    baseUrl,\n    authorization,\n    contentType\n  }) {\n    this._baseUrl = baseUrl;\n    this._authorization = authorization;\n    this._contentType = contentType;\n  }\n\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(console.log(`Ошибка ${res.status}`));\n    }\n\n    return res.json();\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: {\n        authorization: `${this._authorization}`\n      }\n    }).then(res => this._getResponseData(res));\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: {\n        authorization: `${this._authorization}`\n      }\n    }).then(res => this._getResponseData(res));\n  }\n\n  changeUserInfo(object) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: `${this._authorization}`,\n        'Content-Type': this._contentType\n      },\n      body: JSON.stringify({\n        name: object.name,\n        about: object.about\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  addNewCard(object) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: `${this._authorization}`,\n        'Content-Type': this._contentType\n      },\n      body: JSON.stringify({\n        name: object.description,\n        link: object.image\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: `${this._authorization}`,\n        'Content-Type': this._contentType\n      }\n    }).then(res => this._getResponseData(res));\n  }\n\n  getNewUserPic(object) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: `${this._authorization}`,\n        'Content-Type': this._contentType\n      },\n      body: JSON.stringify({\n        avatar: object.avatar\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    if (isLiked) {\n      return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n        method: 'PUT',\n        headers: {\n          authorization: `${this._authorization}`,\n          'Content-Type': this._contentType\n        }\n      }).then(res => this._getResponseData(res));\n    } else {\n      return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n        method: 'DELETE',\n        headers: {\n          authorization: `${this._authorization}`,\n          'Content-Type': this._contentType\n        }\n      }).then(res => this._getResponseData(res));\n    }\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-18',\n  authorization: '04df758b-41ec-45dd-81f7-1b0f03936357',\n  contentType: 'application/json'\n});\nexport default api;","map":{"version":3,"sources":["/Users/yulianesterova/Desktop/dev/react-mesto-auth/src/utils/api.js"],"names":["Api","constructor","baseUrl","authorization","contentType","_baseUrl","_authorization","_contentType","_getResponseData","res","ok","Promise","reject","console","log","status","json","getInitialCards","fetch","headers","then","getUserInfo","changeUserInfo","object","method","body","JSON","stringify","name","about","addNewCard","description","link","image","deleteCard","id","getNewUserPic","avatar","changeLikeCardStatus","isLiked","api"],"mappings":"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","sourcesContent":["class Api {\n    constructor({baseUrl, authorization, contentType}) {\n        this._baseUrl = baseUrl;\n        this._authorization = authorization;\n        this._contentType = contentType;\n    }\n\n    _getResponseData(res) {\n        if (!res.ok) {\n            return Promise.reject(console.log(`Ошибка ${res.status}`));\n        }\n        return res.json();\n    }\n\n    getInitialCards() {\n           return fetch(`${this._baseUrl}/cards`, {\n                headers: {\n                    authorization: `${this._authorization}`\n                }\n            })\n               .then((res) => this._getResponseData(res));\n        }\n\n    getUserInfo() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: {\n                authorization: `${this._authorization}`\n            }\n        })\n            .then((res) => this._getResponseData(res));\n    }\n\n    changeUserInfo(object) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            headers: {\n                authorization: `${this._authorization}`,\n                'Content-Type': this._contentType\n            },\n            body: JSON.stringify({\n                name: object.name,\n                about: object.about\n            })\n        })\n            .then((res) => this._getResponseData(res));\n    }\n\n    addNewCard(object) {\n        return fetch(`${this._baseUrl}/cards`, {\n            method: 'POST',\n            headers: {\n                authorization: `${this._authorization}`,\n                'Content-Type': this._contentType\n            },\n            body: JSON.stringify({\n                name: object.description,\n                link: object.image\n            })\n        })\n            .then((res) => this._getResponseData(res));\n    }\n\n    deleteCard(id) {\n        return fetch(`${this._baseUrl}/cards/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                authorization: `${this._authorization}`,\n                'Content-Type': this._contentType\n            },\n        })\n            .then((res) => this._getResponseData(res));\n    }\n\n    getNewUserPic(object) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: `${this._authorization}`,\n                'Content-Type': this._contentType\n            },\n            body: JSON.stringify({\n                avatar: object.avatar\n            })\n        })\n            .then((res) => this._getResponseData(res));\n    }\n\n    changeLikeCardStatus(id, isLiked) {\n        if(isLiked) {\n            return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n                method: 'PUT',\n                headers: {\n                    authorization: `${this._authorization}`,\n                    'Content-Type': this._contentType\n                }\n            })\n                .then((res) => this._getResponseData(res));\n        } else {\n            return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n                method: 'DELETE',\n                headers: {\n                    authorization: `${this._authorization}`,\n                    'Content-Type': this._contentType\n                }\n            })\n                .then((res) => this._getResponseData(res));\n        }\n    }\n    }\n\n    const api = new Api({baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-18',\n        authorization: '04df758b-41ec-45dd-81f7-1b0f03936357', contentType: 'application/json'})\n\nexport default api;"]},"metadata":{},"sourceType":"module"}